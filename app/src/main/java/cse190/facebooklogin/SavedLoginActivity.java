package cse190.facebooklogin;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.annotation.TargetApi;
import android.app.LoaderManager.LoaderCallbacks;
import android.content.CursorLoader;
import android.content.Intent;
import android.content.Loader;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.provider.ContactsContract;
//import android.support.annotation.NonNull;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AppCompatActivity;
import android.text.TextUtils;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.inputmethod.EditorInfo;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import com.crashlytics.android.Crashlytics;
import com.facebook.AccessToken;
import com.facebook.CallbackManager;
import com.facebook.FacebookCallback;
import com.facebook.FacebookException;
import com.facebook.FacebookSdk;
import com.facebook.login.LoginResult;
import com.facebook.login.widget.LoginButton;
import com.facebook.GraphRequest;
import com.facebook.HttpMethod;
import com.facebook.GraphResponse;

import io.fabric.sdk.android.Fabric;
import java.util.ArrayList;
import java.util.List;
import org.json.*;

import com.facebook.login.widget.ProfilePictureView;
import com.google.android.gms.analytics.HitBuilders;
import com.google.android.gms.analytics.Tracker;
import android.support.v4.view.ViewPager;


import static android.Manifest.permission.READ_CONTACTS;

/******************************************************************************
 * A large majority of this code was generated by Android Studio. The buttons,
 * EditText, etc. are not attached to anything. Code written by me is indicated
 * by these comment blocks (to distinguish between the provided comments).
 *****************************************************************************/
public class SavedLoginActivity extends AppCompatActivity
        implements LoaderCallbacks<Cursor> {

    /**
     * Id to identity READ_CONTACTS permission request.
     */
    private static final int REQUEST_READ_CONTACTS = 0;

    /**
     * A dummy authentication store containing known user names and passwords.
     * TODO: remove after connecting to a real authentication system.
     */
    private static final String[] DUMMY_CREDENTIALS = new String[]{
            "foo@example.com:hello", "bar@example.com:world"
    };
    /**
     * Keep track of the login task to ensure we can cancel it if requested.
     */

    // UI references.

    private View mProgressView;
    private View mLoginFormView;

    /**************************************************************************
     * Private Instances to control Login
     *************************************************************************/
    private LoginButton button;
    private CallbackManager callbackManager;
    private ProfilePictureView profile;

    //analytics
    private Tracker mTracker;

    @Override
    protected void onCreate(Bundle savedInstanceState) {


        super.onCreate(savedInstanceState);
        Fabric.with(this, new Crashlytics());
        /********* Initialize the Facebook SDK before setContentView *********/
        FacebookSdk.sdkInitialize(getApplicationContext());
        setContentView(R.layout.login_saved);



        //analytics
        // Obtain the shared Tracker instance.

        AnalyticsApplication application = (AnalyticsApplication) getApplication();
        mTracker = application.getDefaultTracker();
        //String name = getCurrentImageTitle();
        Log.d("Setting screen name: ", "SavedLoginActivity");
        mTracker.setScreenName("Image~" + "SavedLoginActivity");
        mTracker.send(new HitBuilders.ScreenViewBuilder().build());
        mTracker.send(new HitBuilders.EventBuilder()
                .setCategory("Action")
                .setAction("Share")
                .build());


        /**********************************************************************
         * 1. Initialize FacebookSDK
         * 2. Initialize CallbackManager
         * 3. Attach LoginButton to private instance
         * 4. Register CallbackManager listener for LoginButton
         *********************************************************************/
        callbackManager = CallbackManager.Factory.create();
        button = (LoginButton) findViewById(R.id.facebook_login);
        // You can set your Read/ Publish Permissions here
        // button.setReadPermissions(List or String);
        // or button .setPublishPermissions(List or String)

        button.registerCallback(callbackManager,
                new FacebookCallback<LoginResult>() {
                    /******************************************************************
                     * Method called when the user successfully logs in. You can
                     * redirect the user to another activity in this call (like I coded
                     * below).
                     * @param loginResult - Contains granted permissions, AccessTokens
                     *                      AccessTokens = appID, userID, tokenID, etc.
                     *                      You can use the information here to add to
                     *                      your database
                     *****************************************************************/
                    @Override
                    public void onSuccess(LoginResult loginResult) {
                        String userID = loginResult.getAccessToken().getUserId();
                        String tokenID = loginResult.getAccessToken().getToken();
                        Log.e("CSE 190 FB Login Demo: ", "onSuccess : ID = " +
                                userID + "\nToken = " + tokenID);
                    }

                    /******************************************************************
                     * Method called when the user cancels the login attempt
                     *****************************************************************/
                    @Override
                    public void onCancel() {
                        Log.e("CSE 190 FB Login Demo: ", "onCancel");
                    }

                    /******************************************************************
                     * Method called when an error occurs with login
                     * @param error - A FacebookException/ Error
                     *****************************************************************/
                    @Override
                    public void onError(FacebookException error) {
                        Log.e("CSE 190 FB Login Demo: ", "onError");
                    }
                });


        mLoginFormView = findViewById(R.id.login_form);
        mProgressView = findViewById(R.id.login_progress);

        /* make the API call */
        /*new GraphRequest(
                AccessToken.getCurrentAccessToken(),
                "/me",
                null,
                HttpMethod.GET,
                new GraphRequest.Callback() {
                    public void onCompleted(GraphResponse response) {
                    /* handle the result */
                        /*response.getJSONObject();
                    }
                }
        ).executeAsync();*/

        GraphRequest request = GraphRequest.newMeRequest(AccessToken.getCurrentAccessToken(),
                new GraphRequest.GraphJSONObjectCallback() {
                    @Override
                    public void onCompleted(JSONObject object, GraphResponse response) {
                        try {
                            Log.d( "user_me request = ", object.getString("name"));
                            String name1 = object.getString("name");
                            TextView toEdit= (TextView)findViewById(R.id.textView6);
                            profile = (ProfilePictureView)findViewById(R.id.picture);
                            // Set up postName
                            profile.setProfileId(object.getString("id"));
                            toEdit.setText("Welcome Back, " + name1 +"!");
                        } catch (JSONException e) {
                            e.printStackTrace();
                        }
                    }
                });
        request.executeAsync();


    }


    public void continueMunch(View view) {
        Intent intent = new Intent(getApplicationContext(), MunchListActivity.class);
        startActivity(intent);
        finish();
    }


    @Override
    public Loader<Cursor> onCreateLoader(int id, Bundle args) {
        return null;
    }

    @Override
    public void onLoadFinished(Loader<Cursor> loader, Cursor data) {

    }

    @Override
    public void onLoaderReset(Loader<Cursor> loader) {

    }
}

